%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 200 107
%%HiResBoundingBox: 0 0 199.5 106
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.2 (Build 22D49) Quartz PS Context)
%%Title: (sample)
%%Creator: (PowerPoint: cgpdftops CUPS filter)
%%CreationDate: (Wednesday, February 08 2023 13:03:42 JST)
%%For: (kitamura)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%PageOrder: Ascend
%RBINumCopies: 1
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
580 -272 translate
90 rotate
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
userdict/dscInfo 5 dict dup begin
/Title(sample)def
/Creator(PowerPoint: cgpdftops CUPS filter)def
/CreationDate(Wednesday, February 08 2023 13:03:42 JST)def
/For(kitamura)def
/Pages 1 def
end put
%%BeginProlog
%%BeginFile: lw8_errorhandler-2.0
/currentpacking where 
	{ pop /oldpack currentpacking def /setpacking where
		{
			pop false setpacking
		}if
	}if
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type exec}readonly def
/lmargin 72 def
/rmargin 72 def
/tprint
   {dup length cp add rmargin gt{nl/cp 0 def}if
    dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(--)tprint =string cvs tprint(-- )tprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
 	$error/ostack known{
	$error/ostack get type dup/arraytype eq exch /packedarraytype eq or
   {nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if}if
    systemdict/showpage get exec(%%[ Error: )print
    errorname =print(; OffendingCommand: )print/command 
    load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put
/currentpacking where 
	{ pop  /setpacking where
		{
			pop oldpack setpacking
		}if
	}if
%%EndFile
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 
% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
% languagelevel2 ONLY code goes here
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd
/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd
/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy
	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd
/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if
	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict
	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
% end of language level 2 ONLY code
{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *PageSize A4
<</PageSize[595.00 842.00]>>setpagedevice
%%EndFeature
} stopped cleartomark
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 595 842
%%BeginPageSetup
0.0 842.0 translate -90 rotate
%%EndPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: LWNJHD+YuGothic-Regular
%!FontType1-1.0: LWNJHD+YuGothic-Regular 1.0000.1.8500
14 dict begin
/FontName /LWNJHD+YuGothic-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /gid9 put
dup 34 /gid15 put
dup 35 /gid13 put
dup 36 /gid11 put
dup 37 /gid14 put
dup 38 /gid6 put
dup 39 /gid1 put
dup 40 /gid4 put
dup 41 /gid2 put
dup 42 /gid5 put
dup 43 /gid3 put
dup 44 /gid12 put
dup 45 /gid10 put
dup 46 /gid8 put
dup 47 /gid7 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -840 1 index div -619 2 index div 2378 3 index div 2642 5 -1 roll div]cvx def
/sfnts [<


23622D2C234AB1024E2B2D2C234AB1014E2B2D2C238A4A234564B0022564B002256164B00343525821206459B1024E2B23B000505865592D2C238A4A234564B0022564B002256164B00343525821206459B1014E2B23B000505865592D2C20B003254AB1024E2B8A103B2D2C20B003254AB1014E2B8A103B2D2CB00325B003258AB0672B8A103B2D2CB00325B003258AB0682B8A103B2D2CB0032546B003254660B004252EB00425B00425B0042620B000505821B06A1BB06C592BB0032546B00325466061B08062208A2010233A232010233A2D2CB0032547B003254760B0052547B0806361B00225B00625496323B005254AB080632058621B2159B0042646608A468A4660B02063612D2CB00426B00425B00425B00426B06E2B208A2010233A232010233A2D2C2320B001545821B00225B1024E2BB0805020605920606020B001515821211B20B005515821206661B0402361B100032550B00325B00325505A5820B00325618A535821B000591B21591BB00754582066616523211B2121B000595959B1024E2B2D2CB00225B004254AB0005358B0001B8A8A238AB00159B004254620666120B00526B0062649B00526B00526B0702B236165B02060206661B02061652D2CB0022546208A20B000505821B1024E2B1B452321596165B00225103B2D2CB0042620B802006220B80200638A236120B05D602BB00525118A128A20398A58BA005D10000004266356602B23212010204620B1024E2B23611B2321208A201049B1024E2B593B2D2CBA005D10000009256356602BB00525B00525B00526B06D2BB15D0725602BB00525B00525B00525B00525B06F2BBA005D10000008266356602B20B0005258B0502BB00525B00525B00725B00725B00525B0712BB0021738B00052B00225B001525A58B00425B0062549B00325B00525496020B0405258211BB000525820B0025458B00425B00425B00725B0072549B00217381BB00425B00425B00425B0062549B0021738595959595921212121212D2CBA005D1000000B256356602BB00725B00725B00625B00625B00C25B00C25B00925B00825B06E2BB0041738B00725B00725B00726B06D2BB00425B00425B00426B06D2BB0502BB00625B00625B00325B0712BB00525B00525B00325B002173820B00625B00625B00525B0712B60B00625B00625B0042565B0021738B00225B002256020B040535821B0406123B04061231BB8FFC05058B0406023B04060235959B00825B00825B00426B0021738B00525B005258AB002173820B0005258B00625B0082549B00325B00525496020B0405258211BB0005258B00625B00625B00625B00625B00B25B00B2549B0041738B00625B00625B00625B00625B00A25B00A25B00725B0712BB0041738B00425B00425B00525B00725B00525B0712BB00217381BB004





064BC85BC88BC89BC8CBC8DBC8069BC8DBC8027F39101F7E39181F7D3A931F7C3AFF1F7B3AAB1F7A39931F7939FF1F7838FF1F77370F1F7637FF1F7537CD1F7436FF1F7336931F7235801F7135FF1F7034FF1F6F34AB1F6E33FF1F6D2F2B1F6C32AB1F6B32FF1F6A2FFF1F6930FF1F6831FF1F672EFF1F662D801F652DFF1F642DAB1F632D261F622CFF1F612BCD1F602BFF1F5F2BAB1F5E29721F5D29FF1F5C2AFF1F5B2A671F5A28FF1F5926671F5826FF1F5726CD1F5626671F5527801F5427FF1F5327CD1F5225FF1F5124FF1F50234A1F4F238040D01F4E23FF1F4D234F1F4C22FF1F4B21311F4A21FF1F4921AB1F4821671F47214A1F4620561F4520AB1F4420FF1F431FAB1F421FFF1F411FCD1F401EFF1F3F1D801F3E1DFF1F3D1D931F3C1D451F3B1CFF1F3A39361F36341F1F35344F1F322F801F3130721F302F361F2A29CD1F2726341F26241B195C251B1F1F241A0C1F23041A195C2219111F2119FF1F202518165C1F18931F1E0317165C1D16FF1F1C161B1F1B3219275B183616375B1A3219275B173616375B15193C16815A1340125511FF105512881088200D2331460D220C55B8FFE0400905233146052204550CB80138B4FF890C8804B80130400DFF890488200B2931460B280A55B8FFE0400907293146072806550EB8013AB4FF890E880AB80136B4FF890A8806B80132B43289068800B8012C400DFF890088200923314609220855B8FFE04009032331460322025508B80134B4FF89088802B8012EB3FF890288410F0138008801300088013A00880136008801320088012C008801340088012EB5880340400501B9019000542B4BB807FF524BB008505BB00188B02553B00188B040515AB00688B000555A5B58B101018E59858D8D001D424BB0905358B20300001D4259B10202435158B104038E59002B002B002B002B002B002B002B002B002B2B002B2B2B2B2B2B002B2B002B2B002B2B002B2B2B2B2B2B002B2B002B2B2B2B2B2B002B002B2B2B012B012B012B012B012B012B2B002B002B012B012B2B002B002B2B012B2B012B2B2B2B002B2B2B012B2B2B2B2B002B2B2B2B2B2B2B012B2B2B2B2B2B002B2B2B2B2B2B2B2B2B2B2B2B2B012B2B2B2B2B002B2B2B2B2B2B2B2B2B012B2B2B2B2B2B2B002B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B7374752B2B2B2B2B732B012B0075737374752B2B2B012B2B002B2B2B2B012B002B2B2B2B2B012B002B180000
00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/gid1 1 def
/gid2 2 def
/gid3 3 def
/gid4 4 def
/gid5 5 def
/gid6 6 def
/gid7 7 def
/gid8 8 def
/gid9 9 def
/gid10 10 def
/gid11 11 def
/gid12 12 def
/gid13 13 def
/gid14 14 def
/gid15 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-840 -619 2378 2642} readonly def
/UniqueID 4095570 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28296A7EDB20C4B5346F9ED34289A8A227FC3799356DE002F041025227B0E2D9CF2B58676350AF307FDE56D3E3C55043568C0D3122B0C645D060D2BA1F846E3DC7780EBDAC7E803BBA8C1220082B0B1F00CFBEB5A652485FFB61FA86D34DCB7E628CEFD099863ECB2098F438F6525B34353B69EFA6A1F01E65496C3E2C9F7856FFF7C042A789D2ED10E62BF864B16B4DEF075FE269735E0EFC7FAF9A7525ECAAFA3141B155C0574B41E8A6004AF61992F7AB2DB2669EB498DAE77D8AB945E4CD01F1F72E542B00923D707E3E9376CC481000267D0DB05A2FC79187AB7E7A44FE5CF66C77A4825DF125EFCD342EAD93C332A23787FC2DF9DC4FD7768E31BAEAD9867593A4087D6FA7908ED5F03DB202B61927CDADDB675A4348E04196CB45E4428F65F58553060F69C6E8C534A87D2B401B1A3C00A44E5089607BD9C2CEA9229A6A5A98FF6BD4A11E7D797972336118F93BDFAA4864F65FB8EE0A9EBE9E27C7E118F63FAC926F58C118CB85522892D152F1C23EA8B01F2EF4853C930BA4C005947E3ED3A13A2DB1E51899521665E3D3B6526A30269E7CF7504DC8B0BAA74F756C22D9F62B29C437434408CB144FB1DB6D1B80A49B48A252A62BB67AB69BD993BF8B5B9E481C4AE32B264E7A87EF73920499D107CCEBAF3F714A0D603F987552CC40F2F9040A9EC8E3AEFA4E2142E177899D8B4923FF783ADBB89F85274C390DAF1CFDED27F76023F4411AEB4F555686EA565EAF4C70C88E30C39FA324BBDD770D4D663957D

2ABE57B7FF398D25F09056B20356CE34F8593AABB815131FBB11DA48AD5035A10054E7C4B64DAF4D298E11CFC448BA9F7858CCAA0E7C994B8511B1368DECBE7CDBC970B83D8BEDE1A7847B0B4DC17C26E6B530BDB23BFEE9BEE7D4A871EB74366D9A60DD0E51D4F7134CE70E7291E45E61B4CD76F1B7D09118FFD2BA57D82E56FA4293833989ECA55A9EA153912547640AA2C10BB2A206ED6A2529779BE1E8608851643A87B283DC26C276E12D890408C1D796D959ACA65C456174430B1C7BAC4410208ECDD208BF5611DAAE894D5495A1E556071BC59DBC2BA0F990EF920ACC868EBB90105A2B7C66ED3C4A9E296EE25AB6DCC876C342EF791EF5181541494E5B28F798BA26AA483EDB7B4D659159E0502294BD84B4D7F273618F61B278AD734BDBB839C792436696D1875A4FD6F4A151B8138A5078C1DA454F888D9661948654B7359E27BF81CB8BF7491B1A58D6E9A2C87AEA81B0C00A7F1123C59FB484FD655671B927E206DC1CA35569BD4E1E1E0A706379B9B82180D9075FFDF6AF218C36F63DDFA9F3FF979CE0887734C3AFEC34B26C28786008BDAA1000E27C5E38EE9569D6EAE54D42B7AEB10030A75B6A1843D4034E7E12E1F53EA99445C66329525BC97F409D95270E1E20AD8E86DF66C7EAFD138D676A773AB0FFDC7EF8715C2852E8D82DA4DFE32AE325EA9C677E96E3E5FE5A168F8E15B7C76A1A9601380A43F22B4C55ABBB1F7C9F4797B518A0C5E1979EC429DC1623514B34AD9F0AF20C5287AA03AF26A4A88206DC0BEB90B35ECBE765D376C4B93BD658F4F7DAC7491CEC654DF5F588B2935A28F35CBCB043952C24E6E58F3555E1295044F0DCDDB9AED821C0EE2BBCE87CF4EDDBBD8BA10C9105AFE821AA82C5D8A5D2E9026E015AF65E1BFF18B4C83ABD35E3496E5B8C76A1DFC9F120538B84E0B91621362534A2105D881CE35F7DB40A11B09CFF72AD811FBD250569B5663C2BC67DF7621C701C0FBE81FEEED57F25A8F71B5845CAA271F282F1A5D4C969C0713A44F3E82770212FE09671DBB69AF036201EC67CF58FA70625B839C8E484C18A0BFCA701E4915EAD4EB8C5DDBC6EAE85F7B1E6172EDD15B08DA28298316A40DC133FDAFADBBB1F1A091513CEC5D5665743555BBD0A7215CBF792B235ADB2DB2E52CE5AB7B714F78857FA89D9C438150BA7CFA33039098702E02215EFE596DC4620424F9556673CEA594C1162F3E29C25FBD2F1866B971DA56ECC9AB5CCDC778ED210F698FC380EABD2AF5BDD73D8AA5D037C887BFED9538CB393A7AFA4AADECAD84A5BC40ED102E4E18C54947134472CD9D1E27C2F95EEF9C24D0E410007C63548CBBBB9139E0C81A71E6FC888C5575A5A65DD1EC056BF1B9FD63E0E3A916484A219882A031FEEED7256BD451EEFF04F28118896F496B3CF827F0567F9C25EBB92709E14F0553F7B3D
F5462FFE3B782939643B088F286DE682D9C12374F76840E649CB482D3D683092083ABD7B1B331779FF704D1DA19C2F598131A769E13BE94E438FBFB06D15DADE79BFEE6B94F93F51521864DEFCA5D85FE91196BD2B222AAF9679F53B6C545B17EB33F2C310C4FB8E3A617E15010FED1DA29794D331AC115D1E750EBBF9A9FAC5C14ABC1B9B8731F3363AFBABE2AA315C49B660E4E3A8F4BBD0486FB64714CFA05AE4D53657FDDA17A59C12953D46763D7D21757E46F593DF082077866304E4C3BBE4C90871829459944DE0891B96ABF4580D6FB60176C9C29F0B2FF834AC08F57DB0D76ED4B8F434432F19C64095E515EA418BBACFAE6BFBAE1C58F6CC33F551B0D0C494FE3A9862771E5997E8756D88ED0F73ED3EF458D8771881D3E24CB81DC9DA42F99888999B66B8EA7DC214AEEC9472C0862D2686FDB0FD8902A40A7D8989EDC294255800251B27B7AFE5443929317675C22E13518CEC475B2456E53A2BBA5949AF3348DABD5CD780ADEA617DD80B58653F59EF2310C28EA2B929A91A83C33F22C786CCAFE15C2ED9475C3655859248A0377E8DDB17104E60A1CC0D9170A2355AFD1A10813DC2132A4F350B7325159C51886F08EEED9D89691068EC85B8ECE3ACE7837510EDF0C3D9D532BFEA74BA3D98F360B29DCF6E110603ECDAD37E9A7A6DD2B4FC8D6AE70802C15544655005BB01455FAD49F05B9DFF515411EC1BA2822B2634280548E2EDD19A10D0B7CDAE6A07D364286DE8833AEA551277845364D358BBEE94140060C1A5404D9DFC74C40923AE28BE5022F6A0FA6969FCCFDBDAF4EE9998CC8EE96FBD99F252B290694C5DB823BF6E1013F71B598E88903C3D6A3D6AFB3F9C52BB632835F55D9DAE5D6E889FAD448D077707CB324C3E9C69EB9ED1AFA0C0E03A1446ACF71BB67BEFF672EDB0BC8C1EA4E12C6105D2AAD76F7684E46E49F6A489EE0D81DAA5FE1F7C126B68A2DEB41032E453EA4FA4CBC464A19C798ACFCEDDA087F6A26B092ABD0A32EFD7249B149353CF4B4F493CE039A984D0A80A65791F61EF65155410F281E0AEE40A0E37E7EB5303F8290D322E5DA54A0DEB86AFF712AF0EF18CBE6554D8C0E7E672EA38D3F7CA166FC604AB6E6E274ADF76DDD268341E712B5319384F4E4125162E4BE20DFA87343D5FEC2129B48D3368F0ED3A266DE313CF4B5D66D2498F04E6C59950FE35D4BE189890369CD57EC5EF5128271778EB81543CED13085E4179734A7768D4D0A268DAE777F69B7EB54C3F59F8F0D98B3D323C5730FF57E65692B1399ECBA19D3215448112FF79DA96F01FB0EC7944D26CB48271DF5C8795E79C8EB9D311CFAE42558F32B776718CAB0DC352FAA5EA834DA2651632942E6057458B603F5FAA67B9C77CFE8741FF5CDB464C652C518CF89866D3628640228B18625F1B36FDB9073F0AF96891281BB8BC95
45988EE9783EFFF0034BB3878EC1853651422EE4FFD79D9446CBAB8441264C44174B87037C6A52B2937FD20C6FDFAFB28FA58C92D4DD58ABA1F69456694D57A47955B0626CC8BC3E3EB0BEE618E36C5A55C2AAE7CB1B0540B0624E3A1D5BD921515E1918964DCE4460B49010AA1A4D18D7C74E0AAA1C2C3E9763C7F6ED15595F07F27DB867EFC209A4C891BE47122E143CCB911B58214B70719BACBAE9F5962EC8DA9934FAD61FB8B687CF2B68E675E2E5EA98DEEB65ADBF6BCA4D6D9CEC40DC9A7549272468C2ECBDA82256D6DDF4DE0F743DB66F298413D5DDA9680FB6ACE9093AA40FC1F4FACB867A67E7DB84B7BE1C981C68A414C27C7D4031BE60668A6558CFF8D50572ED25E1D5CDB84C745D74DC90C1A3C4CC0033D132CF32BBAED10957AB016FAEA7BECD664EC5996D099DCC491DA51C60744818171E5884AD1644B69A418D91891D56665856B8DD2608F5DAE2F30AF2391542138696B0F41A1F4B4B4832DAC6F95BD8E16FC37326FE2F199EA1C1DA485677D8832A095AA3FE824A409458B2781A06B5838EB06144A1B1EAC76339345BBA2BBAAF3D9FA97E171BD3BC92AD44C86676F0353A802D4F353B8F798D7122F74E1740029D752B508EC8BA1394B27A6B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/LWNJHD+YuGothic-Regular cguidfix
/F1.1/LWNJHD+YuGothic-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
78.007126 104.79216 685.84131 386.3183 rc
78.007126 491.11044 m
763.84845 491.11044 l
763.84845 104.79216 l
78.007126 104.79216 l
h
f
Q
q
78.007126 104.79216 685.98572 386.3183 rc
78.007126 491.11044 m
763.99286 491.11044 l
763.99286 104.79218 l
78.007126 104.79218 l
h
f
12700 w
8 M
0 0 0 sc
0.00005627 0 0 -0.00005633 263.05728 378.12274 cm
0 711609.5 m
0 318598.41 386280.19 0 862781 0 c
1339282 0 1725562 318598.41 1725562 711609.5 c
1725562 1104621 1339282 1423219 862781 1423219 c
386280.19 1423219 0 1104621 0 711609.5 c
h
S
0.00005627 0 0 -0.00005633 309.80396 333.05231 cm
0 0 m
2698954 0 l
2698954 1061884 l
0 1061884 l
h
S
0.21662708 0 0 0.21688044 371.79163 -141.38077 cm
/F1.1[ 58.333328 0 0 58.333328 0 0]sf
0 2329 m
(!"#$%&)[ 59.377497 59.377497 59.377497 59.377497 59.377497 0.000000 ] xS
0.21662708 0 0 0.21688044 371.79163 -156.76129 cm
0 2329 m
('\(\)*+)[ 35.460831 33.010831 37.502498 33.010831 0.000000 ] xS
0.21662708 0 0 0.21688044 410.19971 -156.76129 cm
0 2329 m
(,-./)[ 59.377497 59.377497 59.377497 0.000000 ] xS
ep
end
%%Trailer
%%Pages: 1
%%BoundingBox: 0 0 595 842
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
